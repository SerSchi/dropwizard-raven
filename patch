diff --git a/pom.xml b/pom.xml
index 9b7673d..ecce548 100644
--- a/pom.xml
+++ b/pom.xml
@@ -59,7 +59,7 @@
     </issueManagement>
 
     <properties>
-        <io.dropwizard.version>0.9.2</io.dropwizard.version>
+        <io.dropwizard.version>1.0.0</io.dropwizard.version>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
 
diff --git a/src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java b/src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java
index 8d2ba22..3b57448 100644
--- a/src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java
+++ b/src/main/java/com/tradier/raven/logging/RavenAppenderFactory.java
@@ -2,8 +2,6 @@ package com.tradier.raven.logging;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import com.fasterxml.jackson.annotation.JsonProperty;
-import com.fasterxml.jackson.annotation.JsonTypeName;
 import com.getsentry.raven.logback.SentryAppender;
 import io.dropwizard.logging.AbstractAppenderFactory;
 
@@ -13,14 +11,20 @@ import ch.qos.logback.core.Appender;
 import ch.qos.logback.core.Layout;
 import ch.qos.logback.core.filter.Filter;
 import ch.qos.logback.core.spi.FilterReply;
+import io.dropwizard.logging.async.AsyncAppenderFactory;
+import io.dropwizard.logging.filter.LevelFilterFactory;
+import io.dropwizard.logging.layout.LayoutFactory;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonTypeName;
 
 
 
 @JsonTypeName("raven")
 public class RavenAppenderFactory extends AbstractAppenderFactory {
 
-	@JsonProperty
-	private String dsn = null;
+    @JsonProperty
+    private String dsn = null;
 
     @JsonProperty
     private String tags = null;
@@ -28,74 +32,75 @@ public class RavenAppenderFactory extends AbstractAppenderFactory {
     @JsonProperty
     private String release;
 
-  @JsonProperty
-  private String environment;
+    @JsonProperty
+    private String environment;
 
     public String getDsn() {
-		return dsn;
-	}
-
-	public void setDsn(String dsn) {
-		this.dsn = dsn;
-	}
-
-	public String getTags() {
-		return tags;
-	}
-
-	public void setTags(String tags) {
-		this.tags = tags;
-	}
-
-	public void setRelease(String release) {
-	  this.release = release;
-	}
-
-	public void setEnvironment(String environment) {
-	  this.environment = environment;
-	}
-
-	@Override
-    public Appender<ILoggingEvent> build(LoggerContext context, String applicationName, Layout<ILoggingEvent> layout) {
-	checkNotNull(context);
-
-	final SentryAppender appender = new SentryAppender();
-	appender.setName("dropwizard-raven");
-	appender.setContext(context);
-	appender.setDsn(dsn);
-	if (release != null) {
-		appender.setRelease(release);
-	}
-	if (environment != null) {
-		appender.setEnvironment(environment);
-	}
-	if(tags != null)
-		appender.setTags(tags);
-
-	appender.start();
-
-	Appender<ILoggingEvent> asyncAppender = wrapAsync(appender);
-	addThresholdFilter(asyncAppender, threshold);
-	addDroppingRavenLoggingFilter(asyncAppender);
-
-	return asyncAppender;
+        return dsn;
+    }
+
+    public void setDsn(String dsn) {
+        this.dsn = dsn;
+    }
+
+    public String getTags() {
+        return tags;
+    }
+
+    public void setTags(String tags) {
+        this.tags = tags;
+    }
+
+    public void setRelease(String release) {
+        this.release = release;
+    }
+
+    public void setEnvironment(String environment) {
+        this.environment = environment;
     }
 
     public void addDroppingRavenLoggingFilter(Appender<ILoggingEvent> appender) {
-	Filter<ILoggingEvent> filter = new DroppingRavenLoggingFilter();
-	filter.start();
-	appender.addFilter(filter);
+        Filter<ILoggingEvent> filter = new DroppingRavenLoggingFilter();
+        filter.start();
+        appender.addFilter(filter);
+    }
+
+    @Override
+    public Appender build(LoggerContext context, String applicationName, LayoutFactory layoutFactory, 
+            LevelFilterFactory levelFilterFactory, AsyncAppenderFactory asyncAppenderFactory) {
+        checkNotNull(context);
+
+        final SentryAppender appender = new SentryAppender();
+        appender.setName("dropwizard-raven");
+        appender.setContext(context);
+        appender.setDsn(dsn);
+        if (release != null) {
+            appender.setRelease(release);
+        }
+        if (environment != null) {
+            appender.setEnvironment(environment);
+        }
+        if (tags != null) {
+            appender.setTags(tags);
+        }
+
+        appender.start();
+        appender.addFilter(levelFilterFactory.build(threshold));
+        Appender<ILoggingEvent> asyncAppender = wrapAsync(appender, asyncAppenderFactory, context);
+        addDroppingRavenLoggingFilter(asyncAppender);
+
+        return asyncAppender;
     }
 
     public static class DroppingRavenLoggingFilter extends Filter<ILoggingEvent> {
 
-	@Override
-	public FilterReply decide(ILoggingEvent event) {
-	    if (event.getLoggerName().startsWith("com.getsentry.raven")) {
-		return FilterReply.DENY;
-	    } else {
-		return FilterReply.ACCEPT;
-	    }
-	}
+        @Override
+        public FilterReply decide(ILoggingEvent event) {
+            if (event.getLoggerName().startsWith("com.getsentry.raven")) {
+                return FilterReply.DENY;
+            } else {
+                return FilterReply.ACCEPT;
+            }
+        }
     }
 }
diff --git a/src/main/java/com/tradier/raven/logging/RavenBootstrap.java b/src/main/java/com/tradier/raven/logging/RavenBootstrap.java
index b5dfa0b..6754283 100644
--- a/src/main/java/com/tradier/raven/logging/RavenBootstrap.java
+++ b/src/main/java/com/tradier/raven/logging/RavenBootstrap.java
@@ -6,6 +6,11 @@ import org.slf4j.LoggerFactory;
 
 import ch.qos.logback.classic.Level;
 import ch.qos.logback.classic.Logger;
+import io.dropwizard.logging.DropwizardLayout;
+import io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory;
+import io.dropwizard.logging.filter.ThresholdLevelFilterFactory;
+import io.dropwizard.logging.layout.DropwizardLayoutFactory;
+import java.util.TimeZone;
 
 /**
  * A class adding a configured {@link com.getsentry.raven.logback.SentryAppender} to the root logger.
@@ -48,11 +53,11 @@ public final class RavenBootstrap {
      * @param release         The release name to pass to Sentry
      */
     public static void bootstrap(
-        final String dsn,
-        Optional<String> tags,
-        boolean cleanRootLogger,
-        String environment,
-        String release
+            final String dsn,
+            Optional<String> tags,
+            boolean cleanRootLogger,
+            String environment,
+            String release
     ) {
         final RavenAppenderFactory raven = new RavenAppenderFactory();
         raven.setThreshold(Level.ERROR);
@@ -65,16 +70,18 @@ public final class RavenBootstrap {
     }
 
     private static void registerAppender(
-        String dsn,
-        boolean cleanRootLogger,
-        RavenAppenderFactory raven
+            String dsn,
+            boolean cleanRootLogger,
+            RavenAppenderFactory raven
     ) {
         final Logger root = (Logger) LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
 
         if (cleanRootLogger) {
             root.detachAndStopAllAppenders();
         }
-
-        root.addAppender(raven.build(root.getLoggerContext(), dsn, null));
+        ThresholdLevelFilterFactory levelFilterFactory = new ThresholdLevelFilterFactory();
+        DropwizardLayoutFactory layoutFactory = new DropwizardLayoutFactory();
+        AsyncLoggingEventAppenderFactory asyncAppenderFactory = new AsyncLoggingEventAppenderFactory();
+        root.addAppender(raven.build(root.getLoggerContext(), dsn, layoutFactory, levelFilterFactory, asyncAppenderFactory));
     }
 }
diff --git a/src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java b/src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java
index 1f6a441..9158ae6 100644
--- a/src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java
+++ b/src/test/java/com/tradier/raven/logging/RavenAppenderFactoryTest.java
@@ -13,6 +13,9 @@ import ch.qos.logback.classic.AsyncAppender;
 import ch.qos.logback.classic.LoggerContext;
 import ch.qos.logback.classic.spi.ILoggingEvent;
 import ch.qos.logback.core.Appender;
+import io.dropwizard.logging.async.AsyncLoggingEventAppenderFactory;
+import io.dropwizard.logging.filter.ThresholdLevelFilterFactory;
+import io.dropwizard.logging.layout.DropwizardLayoutFactory;
 
 public class RavenAppenderFactoryTest {
 
@@ -26,7 +29,7 @@ public class RavenAppenderFactoryTest {
 	
     @Test(expected = NullPointerException.class)
     public void buildRavenAppenderShouldFailWithNullContext() {
-        new RavenAppenderFactory().build(null, "", null);
+        new RavenAppenderFactory().build(null, "", null, null, null);
     }
 	
     @Test
@@ -34,7 +37,11 @@ public class RavenAppenderFactoryTest {
         final RavenAppenderFactory raven = new RavenAppenderFactory();
         final String dsn = "https://user:pass@app.getsentry.com/id";
 
-        Appender<ILoggingEvent> appender = raven.build(new LoggerContext(), dsn, null);
+        ThresholdLevelFilterFactory levelFilterFactory = new ThresholdLevelFilterFactory();
+        DropwizardLayoutFactory layoutFactory = new DropwizardLayoutFactory();
+        AsyncLoggingEventAppenderFactory asyncAppenderFactory = new AsyncLoggingEventAppenderFactory();
+        Appender<ILoggingEvent> appender = raven.build(
+                new LoggerContext(), dsn, layoutFactory, levelFilterFactory, asyncAppenderFactory);
 
         assertThat(appender, instanceOf(AsyncAppender.class));
     }
